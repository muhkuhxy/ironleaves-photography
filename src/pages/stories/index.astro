---
import Layout from "../../layouts/Layout.astro"
import LayoutSpacer from "../../components/LayoutSpacer.astro"
import BlogStories from "../../components/BlogStories.astro"
import SectionContent from "../../components/SectionContent.astro"
import SectionHeader from "../../components/SectionHeader.astro"
import SvgPetalFlower from "../../components/svg/SvgPetalFlower.astro"
import { tags, useStories } from "../../lib/blog"

const stories = await useStories()
// console.log({ stories })
---

<Layout>
  <section class="relative text-bluegray" x-data="StoryFilter">
    <SectionContent class="">
      <div class="relative max-w-prose md:ml-[33%] md:py-16">
        <SvgPetalFlower
          class="invisible absolute mt-[-5%] h-[90%] translate-x-[calc((100%+2rem)*-1)] rotate-[-15deg] fill-current text-emerald md:visible"
        />
        <SectionHeader>
          <span slot="roofline">Stories</span>
          Immer auf dem Laufenden
        </SectionHeader>
        <LayoutSpacer />
        <p>
          Erhaltet hier einen exklusiven Einblick in die wunderschönen
          Hochzeiten, die ich begleiten durfte! Außerdem gebe ich euch
          hilfreiche Tipps und Tricks, wie ihr Euren wichtigen Tag gestalten
          könnt und was ihr für Euren Hochzeitsfotografen beachten müsst.
        </p>
      </div>
      <div x-cloak x-show="true" class="col-span-2">
        <LayoutSpacer />
        <ul class="items-center justify-between md:flex">
          <li class="max-md:mb-2">Filter nach:</li>
          {
            tags.map(({ tag, label }) => (
              <li
                role="button"
                class="flex cursor-pointer justify-between px-2 py-2 uppercase text-sunset transition-all hover:-translate-y-0.5 hover:shadow-md active:hover:translate-y-0 lg:px-4"
                x-on:click={`filter(query === '${tag}' ? null : '${tag}')`}
              >
                <span
                  x-bind:class={`{ 'underline font-bold': query === '${tag}' }`}
                >
                  {label}
                </span>
              </li>
            ))
          }
        </ul>
      </div>
    </SectionContent>

    <BlogStories stories={stories}>
      <div class="col-span-full hidden w-full text-center" x-ref="noStories">
        Sorry, dazu gibt's bislang noch keine Stories.
      </div>
    </BlogStories>
  </section>
</Layout>

<script>
  import Alpine from "alpinejs"
  import { gsap, Flip } from "../../lib/gsap"

  Alpine.data("StoryFilter", () => ({
    query: null as string | null,
    stories: [],

    init() {
      this.stories = gsap.utils.toArray(
        this.$el.querySelectorAll(
          "[data-tag], [data-stories-parent], [x-ref=noStories]",
        ),
      )
    },

    filter(query: string) {
      this.query = query
      const state = Flip.getState(this.stories)

      let matches = 0
      ;(this.stories as HTMLElement[]).forEach((item) => {
        if ("tag" in item.dataset) {
          if (!query || item.dataset.tag === query) {
            matches++
            item.classList.remove("hidden")
          } else {
            item.classList.add("hidden")
          }
        }
      })

      if (matches === 0) {
        this.$refs.noStories.classList.remove("hidden")
      } else {
        this.$refs.noStories.classList.add("hidden")
      }

      Flip.from(state, {
        // absoluteOnLeave: true,
        absolute: "[data-tag]",
        duration: 0.75,
        ease: "sine.inOut",
        onEnter: (elements: Element[]) => {
          gsap.from(elements, {
            opacity: 0,
            delay: 0.65,
          })
        },
        onLeave: (elements: Element[]) =>
          gsap.to(elements, {
            scale: 0.85,
            opacity: 0,
            duration: 0.5,
            ease: "power1.inOut",
          }),
      })
    },
  }))
</script>
