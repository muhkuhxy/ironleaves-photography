---
import LayoutContainer, { getContainerClasses } from "./LayoutContainer.astro";
import SvgBurger from "./svg/SvgBurger.astro";
import SvgInstagram from "./svg/SvgInstagram.astro";

type Props = {
  highlightCurrentSection?: boolean;
};

const { highlightCurrentSection = false } = Astro.props;

const links = [
  { title: "Über mich", target: "about-me" },
  { title: "Werte", target: "candor" },
  { title: "Bildlooks", target: "looks" },
  { title: "Stories", target: "stories" },
  { title: "Papeterie", target: "papeterie" },
  { title: "Pakete", target: "packages" },
  { title: "Kontakt", target: "contact" },
];
const social = [
  { name: "Instagram", url: "https://instagram.com/ironleaves_photography/" },
];

const containerClass = getContainerClasses(false, true);
---

<header
  x-data="header"
  class="bg-white text-bluegray z-40 sticky top-0 transition-all ease-in-out duration-500 opacity-90"
  x-bind="binder"
  data-highlight-current-section={highlightCurrentSection}
>
  <nav class="bg-white -mt-px">
    <LayoutContainer>
      <div class="flex relative z-20 bg-white justify-between py-4 md:hidden">
        <label
          class="cursor-pointer"
          x-on:click="open = !open"
          for="nav-menu-open"
        >
          <SvgBurger class="w-6 inline mr-2 fill-current" />
          Menü
        </label>
        <a href={social[0].url} target="_blank" title={social[0].name}>
          <SvgInstagram class="fill-current w-6" />
        </a>
      </div>
    </LayoutContainer>
    <input
      id="nav-menu-open"
      type="checkbox"
      x-bind:checked="open"
      class="sr-only"
      x-bind:class="'js'"
    />
    <div
      class:list={[
        containerClass,
        "absolute md:static bg-white",
        "pb-4 md:pt-4 md:grid grid-cols-[12fr,1fr] gap-3 lg:gap-8 xl:gap-12",
      ]}
      x-show="open || gtMd"
      x-transition:leave="slide-enter-active"
      x-transition:leave-end="slide-leave-to"
      x-transition:enter="slide-enter-active"
      x-transition:enter-start="slide-enter"
    >
      <hr class="mb-4 col-span-full md:hidden" />
      <ul
        class="grid grid-cols-2 md:grid-cols-[repeat(7,auto)] grid-rows-4 md:grid-rows-1 grid-flow-col gap-3 lg:gap-8 xl:gap-12"
      >
        {
          links.map(({ title, target }) => (
            <li
              class="nav-link relative w-fit cursor-pointer after:h-0 md:after:h-px after:bg-bluegray"
              x-bind:class={`{ 'font-bold underline': '${target}' === maxSection }`}
              x-on:click="open && (open = false)"
            >
              <a href={`#${target}`}>{title}</a>
            </li>
          ))
        }
      </ul>
      <ul class="justify-self-end">
        <li class="justify-self-end hidden md:block">
          <a href={social[0].url} target="_blank" title={social[0].name}>
            <SvgInstagram class="fill-current w-6" />
          </a>
        </li>
      </ul>
    </div>
  </nav>
</header>

<script>
  import Alpine from "alpinejs";
  import { reactiveBreakpoints } from "../lib/breakpoints";

  Alpine.data("header", () => ({
    open: false,
    sectionRatios: {},
    maxSection: "",
    scrolledDown: false,
    lastScrollY: 0,

    binder: {
      [":class"]:
        "scrolledDown && (!open || gtMd) ? '-translate-y-full delay-150' : 'shadow-lg'",
      ["@click.outside"]() {
        if (this.open) {
          this.open = false;
        }
      },
    },

    get gtMd() {
      return reactiveBreakpoints.md;
    },

    updateMaxSection() {
      this.maxSection = Object.entries(
        this.sectionRatios as Record<string, number>
      ).reduce(
        (memo, entry) => {
          return entry[1] > memo[1] ? entry : memo;
        },
        ["", 0]
      )[0];
      // console.log({ maxSection: this.maxSection });
    },

    init() {
      document.addEventListener("scroll", () => {
        this.scrolledDown =
          window.scrollY > 600 && window.scrollY > this.lastScrollY;
        this.lastScrollY = window.scrollY;
      });

      if (
        "highlightCurrentSection" in this.$el.dataset &&
        IntersectionObserver
      ) {
        let timer: number | null = null;
        const observer = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              const section = (entry.target as HTMLElement).id;
              this.sectionRatios[section] = entry.intersectionRatio;
            });
            timer = setTimeout(() => {
              timer != null && clearTimeout(timer);
              this.updateMaxSection();
            }, 100);
          },
          {
            threshold: Array(10)
              .fill(undefined)
              .map((_, index) => (index + 1) / 10),
          }
        );

        const sections = document.querySelectorAll("[data-scroll-target][id]");
        sections.forEach((section) => observer.observe(section));
      }
    },
  }));
</script>

<style>
  .slide-enter-active,
  .slide-leave-active {
    transition: all 0.3s ease-in-out;
  }

  .slide-enter,
  .slide-leave-to {
    transform: translate3d(0, -100%, 0);
  }

  .nav-link {
    text-underline-offset: calc(1rem / 8);

    &::after {
      position: absolute;
      bottom: 3px;
      width: 0;
      left: 0;
      transition: all 0.3s ease-out;
    }

    &:hover::after {
      width: 100%;
    }
  }

  @media (max-width: theme(screens.md)) {
    #nav-menu-open:not(.js) + * {
      display: none;
    }

    #nav-menu-open:not(.js):checked + * {
      display: block;
    }
  }
</style>
